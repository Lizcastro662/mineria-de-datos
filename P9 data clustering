import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def euclidean_distance(p_1, p_2):
    return np.sqrt(np.sum((p_2 - p_1) ** 2))

def k_means(points, k):
    DIM = len(points[0])
    N = len(points)
    num_cluster = k
    iterations = 15

    x = np.array(points)
    y = np.random.randint(0, num_cluster, N)

    mean = np.zeros((num_cluster, DIM))
    for t in range(iterations):
        for k in range(num_cluster):
            mean[k] = np.mean(x[y == k], axis=0)
        for i in range(N):
            dist = np.sum((mean - x[i]) ** 2, axis=1)
            pred = np.argmin(dist)
            y[i] = pred

    for kl in range(num_cluster):
        xp = x[y == kl, 0]
        yp = x[y == kl, 1]
        plt.scatter(xp, yp)
    plt.savefig("img/kmeans.png")
    plt.close()
    return mean

# Lectura del archivo CSV
file_path = r"C:\Users\lizca\Downloads\mineria de datos\base\datoslimpios.csv"
df = pd.read_csv(file_path)

# Imprimir las primeras filas del DataFrame para verificar su estructura
print(df.head())

# Preparar los datos para el algoritmo de k-means
points = df[['player_ranking', 'tourney_year']].values.tolist()

# Ejecutar el algoritmo k-means
k = 3  # NÃºmero de clusters deseados
kmeans_result = k_means(points, k)
print(kmeans_result)

